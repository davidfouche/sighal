Attribute VB_Name = "TestLogging"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' TEST_CODE:   TestLogging
'''                 - Test logger
'''
''' Date            Developer               Action
''' --------------------------------------------------------------------------
''' 31/05/2019      David FOUCHE            Created
'''

'define 'myLogger' as 'Object' (not 'Logger') to ensure that
'this test Class works in VBAProjects that reference 'Logging.xla'
'since Public Class Moduls may not be exposed as Type between VBAProjects
Dim myLogger As Object

'***************************************************************************
'Purpose: Test all the methods that creates traces in log files
'Inputs:  None
'Outputs: A log with traces generated by this test
'***************************************************************************
Sub TestLogging()
  
 'Logging.setModulName (Application.VBE.ActiveVBProject.name)
 'BUG: cannot access Application.VBE.ActiveVBProject.name
 Logging.setModulName ("SIGHAL_Debug")
 Logging.logINFO ("***Starting Logger test..")
 
 Call printLogLevels

 Logging.log ("***Testing LogLevels..")
 Call Logging.setLoggigParams(Logging.lgALL, True, True, True)
 Call printLogLevels
 Call Logging.setLoggigParams(Logging.lgFINEST, True, True, True)
 Call printLogLevels
 Call Logging.setLoggigParams(Logging.lgFINER, True, True, True)
 Call printLogLevels
 Call Logging.setLoggigParams(Logging.lgFINE, True, True, True)
 Call printLogLevels
 Call Logging.setLoggigParams(Logging.lgINFO, True, True, True)
 Call printLogLevels
 Call Logging.setLoggigParams(Logging.lgWARN, True, True, True)
 Call printLogLevels
 Call Logging.setLoggigParams(Logging.lgFATAL, True, True, True)
 Call printLogLevels
 Call Logging.setLoggigParams(Logging.lgBASIC, True, True, True)
 Call printLogLevels
 Logging.log ("***Now Turn logging off ..")
 Call Logging.setLoggigParams(Logging.lgDISABLED, True, True, True)
 Call printLogLevels
 Call Logging.setLoggigParams(Logging.lgALL, True, True, True)
 Call Logging.log("***Testing logging with 'logpoint' entry ..")
 Call printLogLevelsWithLogPoint
 
 Call Logging.setLoggigParams(Logging.lgALL, True, False, False)
 Logging.log ("***Testing logBuffer ..")
 Logging.log "----Printing Logging.getLogBuffer to Console only ----"
 Logging.log Logging.getLogBuffer
 Call Logging.setLoggigParams(Logging.lgALL, True, True, True)
 
 Logging.setModulName ("")
 
 Call TestLoggerInstance
 
 Logging.log ("***Testing writing logBuffer to Tracefile ..")
 'This will write the buffer content to a new file vba_trace.log
 Logging.writeLogBufferToTraceFile
 
 Logging.log ("***Testing done.***")
 
End Sub

'***************************************************************************
'Purpose: Test the log of the system information
'Inputs:  None
'Outputs: A log with system informations
'***************************************************************************
Sub TestSystemInfo()
    Logging.setModulName ("SIGHAL_Debug")
    Call Logging.setLoggigParams(Logging.lgALL, True, True, True)
    Call Logging.LogOperatingSystem
End Sub

'***************************************************************************
'Purpose: Test the clean up of logs
'Inputs:  None
'Outputs: The logger must be cleaned up
'***************************************************************************
Sub TestCleanupfiles()
    Logging.setModulName ("SIGHAL_Debug")
    Call Logging.setLoggigParams(Logging.lgALL, True, True, True)
    Call Logging.cleanup
End Sub

'***************************************************************************
'Purpose: Test the method that prints the log level
'Inputs:  None
'Outputs: Print log levels
'***************************************************************************
Private Sub printLogLevels()
 Logging.log ("-LogBasic = like Debug.Print-")
 Logging.logINFO ("-logINFO-")
 Logging.logWARN ("-logWARN-")
 Logging.logFATAL ("-logFATAL-")
 Logging.logFINE ("-logFINE-")
 Logging.logFINER ("-logFINER-")
 Logging.logFINEST ("-logFINEST-")
End Sub

'***************************************************************************
'Purpose: Test the method that prints the log level with log points
'Inputs:  None
'Outputs: Print log levels with log points
'***************************************************************************
Private Sub printLogLevelsWithLogPoint()
 Logging.log ("-LogBasic = like Debug.Print-")
 Logging.logINFO "-logINFO-", "printLogLevelsWithLogPoint"
 Logging.logWARN "-logWARN-", "printLogLevelsWithLogPoint"
 Logging.logFATAL "-logFATAL-", "printLogLevelsWithLogPoint"
 Logging.logFINE "-logFINE-", "printLogLevelsWithLogPoint"
 Logging.logFINER "-logFINER-", "printLogLevelsWithLogPoint"
 Logging.logFINEST "-logFINEST-", "printLogLevelsWithLogPoint"
End Sub

'***************************************************************************
'Purpose: Test the method that prints the logger instance details
'Inputs:  None
'Outputs: Prints the details of the logger instance
'***************************************************************************
Sub TestLoggerInstance()
  'Set myLogger = Logging.getNewLogger(Application.VBE.ActiveVBProject.name)
  'BUG: cannot access to Application.VBE.ActiveVBProject.name
  Set myLogger = Logging.getNewLogger("SIGHAL")
  Call myLogger.setLoggigParams(Logging.lgALL, True, True, True)
  myLogger.logBASIC "***Starting TestLoggerInstance test.."
  myLogger.logBASIC "-LogBasic = like Debug.Print-", "TestLoggerInstance"
  myLogger.logINFO "-logINFO-", "TestLoggerInstance"
  myLogger.logWARN "-logWARN-", "TestLoggerInstance"
  myLogger.logFATAL "-logFATAL-", "TestLoggerInstance"
  myLogger.logFINE "-logFINE-", "TestLoggerInstance"
  myLogger.logFINER "-logFINER-", "TestLoggerInstance"
  myLogger.logFINEST "-logFINEST-", "TestLoggerInstance"
  
  'call a sub
  Call MySubOrFunction
  
  Call myLogger.setLoggigParams(Logging.lgALL, True, False, False)
  myLogger.logBASIC "*** printing the TestLoggerInstance buffer to Console.."
  myLogger.logBASIC myLogger.getLogBuffer
  
End Sub

'***************************************************************************
'Purpose: A method called by TestLogging for test purpose
'Inputs:  None
'Outputs: None
'***************************************************************************
Sub MySubOrFunction()
  myLogger.logINFO "This is my message ..", "MySubOrFunction"               ' log a message in Sub 'MySubOrFunction'
End Sub

